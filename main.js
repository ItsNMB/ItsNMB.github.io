let code = document.querySelector('.code');
// code.innerHTML = 'import java.net.*;<br>import java.io.*;<br>public class GreetingServer extends Thread {<br>&nbsp;&nbsp;private ServerSocket serverSocket;<br>&nbsp;&nbsp;public GreetingServer(int port) throws IOException {<br>&nbsp;&nbsp;&nbsp;&nbsp;serverSocket = new ServerSocket(port);<br>&nbsp;&nbsp;&nbsp;&nbsp;serverSocket.setSoTimeout(0);<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;public void run() {<br>&nbsp;&nbsp;&nbsp;&nbsp;while (true) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(serverSocket.getLocalSocketAddress());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Waiting for client on port " + serverSocket.getLocalPort() + "...");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Socket server = serverSocket.accept();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Just connected to " + server.getRemoteSocketAddress());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataInputStream in = new DataInputStream(server.getInputStream());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(in.readUTF());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataOutputStream out = new DataOutputStream(server.getOutputStream());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.writeUTF("Thank you for connecting to \n" + server.getLocalSocketAddress() + "\nGoodbye!");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server.close();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (SocketTimeoutException s) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Socket timed out!");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (IOException e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;public static void main(String [] args) {<br>&nbsp;&nbsp;&nbsp;&nbsp;int port = Integer.parseInt(args[0]);<br>&nbsp;&nbsp;&nbsp;&nbsp;try {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread t = new GreetingServer(port);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.start();<br>&nbsp;&nbsp;&nbsp;&nbsp;} catch (IOException e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br>';
code.innerHTML = '// kleine subList Klasse um darzustellen, wie man aus einer Liste einen Teil der Liste in einer neuen Liste speichern kann<br>import java.util.*;<br>public class subList {<br>&nbsp;&nbsp;public static void main(String[] argv) throws Exception {<br>&nbsp;&nbsp;&nbsp;&nbsp;try {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList<String><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrlist = new ArrayList<String>();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrlist.add("A");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrlist.add("B");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrlist.add("C");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrlist.add("D");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrlist.add("E");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Original arrlist: " + arrlist);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList<String> arrlist2 = arrlist.subList(2, 4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Sublist of arrlist: " + arrlist2);<br>&nbsp;&nbsp;&nbsp;&nbsp;} catch (IndexOutOfBoundsException e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Exception thrown : " + e);<br>&nbsp;&nbsp;&nbsp;&nbsp;} catch (IllegalArgumentException e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Exception thrown : " + e);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br>';
